---
layout: post
title: "虚函数"
date: 2012-11-29 09:30
comments: true
categories: C/C++
---

面试的时候，常常宣称自己是一个C++程序员，不免就会被一些有关C++的问题，例如虚函数的实现原理；析构函数是否能定义为虚函数等等。很多时候都回答不上来，就总会以时间久了，搪塞过去，面试完，可能回去查查答案，但也总是不求甚解。

既然有了博客，我就准备看看这些方面的内容，希望能记录下来，有所积累。于是就到网上查或在书上找找，后来发现里面的内容太多了，不是一篇两篇博客就能写完的。于是没有办法，就只有硬着头皮写一个系列了。今天是第一部分虚函数和虚继承。

C++的关键字virtual只能用在两个地方，一是定义类的成员函数为虚函数，二是定义类的继承关系为虚继承。这两点的用处大相径庭，但是在设计思想上还是有一定的共同性的。这篇文章先讲虚函数，下一篇讲虚继承。

<!-- more -->

## 虚函数

虚，不实也。也可以理解为看到的和实际的不一样。虚函数存在的目的只有一个，那就是实现多态。关于多态，可以去参考各种教科书，上面都有详细的说明。虚函数在实现多态时，通过一种间接的运行时（而不是编译时）的机制激活（调用）的函数。下面看一个多态的简单例子。

{% include_code 多态的简单例子 lang:cpp cpp/polymorphism.cc %}

运行结果如下[^1]:

{% img center /images/blogimages/polymorphism_output.jpg %}

从运行结果来看，函数`call_func()`最后实际调用的`f()`要到运行时，根据传入的参数，才能确定调用的是哪个函数。

那么虚函数的这种性质是如何实现的呢？答案是虚表(vtable)。具体的做法是，在对象的存储空间里面开辟一个指针，指针指向一个存放着虚函数地址的函数指针表。编译器在生成调用虚函数的指令时，按照偏移量，从虚表中取相应的函数指针进行调用。子类的虚函数会覆盖父类中对应虚函数在虚表中的位置，所以在调用的时候，就调用到了子类的函数了。也许这段话没有说太清楚，下面看一段代码或许会有帮助。

{% include_code 测试虚表的例子 lang:cpp cpp/vfun.cc %} 

输出结果如下：

{% img center /images/blogimages/vfun_output.jpg %}

上面这段代码的第20行，通过定义指针的方式[^2]，直接访问虚表，发现它的输出与通过对象调用是一直的，而且指针的类型无关。由上面的代码也可以看出虚表在对象的内存空间中是怎么分布的。对象的起始地址，就是虚表指针。虚表的最后一项为0，代表虚表结束。上面程序的最后一项输出可以看出来。

用一张图来说明情况。

{% img center /images/blogimages/one_derived.jpg %}

在多个虚函数的情况下，子类仅仅覆盖在子类重载的虚函数，而子类新定义的虚函数，加入到虚表的最后。下面这个例子就是多个虚函数的情况。

{% include_code 多个虚函数 lang:c cpp/vfun1.cc %}

输出结果：

{% img center /images/blogimages/vfun1_output.jpg %}

虚表的组织结构如下:

{% img center /images/blogimages/more_derived.jpg %}

由图中可以看出，子类的`f()`覆盖了基类的`f()`，而基类的`f0()`依然存在，子类的`f1()`添加到了虚表的最后。

当有多个基类时，子类会为每个基类添加一个虚表指针，指针的顺序按照类定义时的声明顺序。下面这个例子就是这样的。

{% include_code 虚函数多重继承 lang:cpp cpp/vfun2.cc %}

输出结果：

{% img center /images/blogimages/vfun2_output.jpg %}

这是一个比较复杂的继承关系了，可以看出最后的`derived`类里面已经有3个虚表指针了，也就是说，子类会讲所有的父类的虚表继承下来，并将自己的虚函数添加到第一个虚表的最后。还有一点，就是子类的虚函数会覆盖所有基类的对应虚函数，图中的`derived::f()`就覆盖了3处。其组织结构如下：

{% img center /images/blogimages/more_bases.jpg %}

[^1]: 系统为ubuntu 12.04 server 64bit, 编译器为gcc 4.6.3 
[^2]: 程序运行在64位机器上，所以使用long进行强制转换获取指针，如果在32位服务器上，就应该用int。

## 几个相关问题

#### 构造函数不能声明为虚函数

#### 析构函数声明为虚函数

#### 什么时候使用虚函数
